#!/usr/bin/env python

# Copyright (c) 2018, John Morris
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#     * Redistributions of source code must retain the above
#       copyright notice, this list of conditions and the following
#       disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials
#       provided with the distribution.
#     * Neither the name of the <organization> nor the names of its
#       contributors may be used to endorse or promote products
#       derived from this software without specific prior written
#       permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
# <COPYRIGHT HOLDER> BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# -*- coding: utf-8 -*-

import sys
import os
import subprocess
import signal

from machinekit import launcher, config, rtapi

# ROS
import rospy

MAIN_HAL = 'main.py'
NAME = 'hal_mgr'
HAL_IO = 'hal_io'
SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))

os.chdir(SCRIPT_DIR)

debug = int(os.environ.get('DEBUG', 0))
launcher.set_debug_level(debug)

shutdown_begun = False


def shutdown(msg="Shutting down for unknown reason", res=0):
    # Only run this once
    global shutdown_begun
    if shutdown_begun:
        return
    shutdown_begun = True

    if res:
        rospy.logerr("hal_mgr:  %s" % msg)
    else:
        rospy.loginfo("hal_mgr:  %s" % msg)
    launcher.end_session()
    rospy.signal_shutdown(msg)
    sys.exit(res)


if 'MACHINEKIT_INI' not in os.environ:  # export for package installs
    mkconfig = config.Config()
    os.environ['MACHINEKIT_INI'] = mkconfig.MACHINEKIT_INI

try:
    # Set up ROS node
    rospy.init_node(NAME)
    # Call end_session() on ROS shutdown; don't have the launcher
    # register its own exit handler
    rospy.on_shutdown(lambda: shutdown('Graceful shutdown via ROS'))
    rate = rospy.Rate(1)  # 1hz
    rospy.loginfo("hal_mgr:  Initialized node")

    # Find the hal_hw_interface comp's directory in LD_LIBRARY_PATH and put it
    # into $COMP_DIR
    comp_dir = ""
    for path in os.environ.get('LD_LIBRARY_PATH', '').split(':'):
        if os.path.exists(os.path.join(path, 'hal_hw_interface.so')):
            comp_dir = path
    os.environ['COMP_DIR'] = comp_dir
    rospy.loginfo("hal_mgr:  COMP_DIR set to '%s'" % comp_dir)

    # Get parameters
    if not rospy.has_param(NAME):
        shutdown("No parameters set for '%s'" % NAME, 1)
    try:
        hal_mgr_config = rospy.get_param(NAME)
    except KeyError:
        shutdown("No keys defined at %s" % NAME, 1)
    if 'hal_files' not in hal_mgr_config:
        shutdown("%s has no 'hal_files' key" % NAME, 1)
    if 'hal_file_dir' not in hal_mgr_config:
        shutdown("%s has no 'hal_file_dir' key" % NAME, 1)

    # Set up HAL
    launcher.cleanup_session()  # kill any running Machinekit instances
    launcher.start_realtime()
    rospy.loginfo("hal_mgr:  Started realtime")

    # Load rtapi module and set up signal handlers
    if not rtapi.__rtapicmd:
        rtapi.init_RTAPI()

    def shutdown_graceful(signum, frame):
        shutdown('Gracefully shutting down after interrupt signal')

    signal.signal(signal.SIGINT, shutdown_graceful)
    signal.signal(signal.SIGTERM, shutdown_graceful)

    # Load HAL configuration
    os.environ['PATH'] += ":%s" % SCRIPT_DIR  # Help HAL find hal_io comp
    for fname in hal_mgr_config['hal_files']:
        fpath = os.path.join(hal_mgr_config['hal_file_dir'], fname)
        if not os.path.exists(fpath):
            shutdown(
                "No file '%s' in directory '%s'"
                % (fname, hal_mgr_config['hal_file_dir'])
            )
        rospy.loginfo("hal_mgr:  Loading hal file '%s'" % fname)
        launcher.load_hal_file(fpath)
        rospy.loginfo("hal_mgr:  Loading hal file '%s' complete" % fpath)

    # Spin until ROS shutdown event
    rospy.loginfo("ROS node and HAL started successfully")
    while not rospy.is_shutdown():
        launcher.check_processes()
        rate.sleep()

except subprocess.CalledProcessError as e:
    shutdown("Process error:  %s" % e, 1)
except rospy.ROSInterruptException as e:
    shutdown("Interrupt:  %s" % e, 0)

shutdown("Shutting down", 0)
